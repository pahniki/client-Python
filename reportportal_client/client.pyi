from reportportal_client.core.test_manager import TestManager as TestManager
from reportportal_client.helpers import dict_to_payload as dict_to_payload, get_id as get_id, get_msg as get_msg, uri_join as uri_join
from typing import Any, Dict, List, Optional, Text
from requests import Session

logger: Any

class RPClient:
    endpoint: Text = ...
    log_batch_size: int = ...
    project: Text = ...
    token: Text = ...
    launch_id: Optional[Text] = ...
    verify_ssl: bool = ...
    is_skipped_an_issue: bool = ...
    api_v1: str = ...
    api_v2: str = ...
    base_url_v1: Text = ...
    base_url_v2: Text = ...
    session: Session = ...
    def __init__(self, endpoint: str, project: str, token: str, log_batch_size: int=..., is_skipped_an_issue: bool=..., verify_ssl: bool=..., retries: Optional[int]=..., max_pool_size: int=..., launch_id: Optional[str]=...) -> None: ...
    def start_launch(self, name: str, start_time: str, description: Optional[str]=..., attributes: Optional[Dict]=..., mode: Optional[str]=..., rerun: bool=..., rerun_of: Optional[List]=..., **kwargs: Any) -> str: ...
    def finish_launch(self, end_time: str, status: Optional[str]=..., attributes: Optional[Dict]=..., **kwargs: Any) -> Dict: ...
    def start_item(self, name: str, start_time: str, item_type: str, description: Optional[str]=..., attributes: Optional[Dict]=..., parameters: Optional[Dict]=..., parent_item_id: Optional[str]=..., has_stats: bool=..., code_ref: Optional[str]=..., **kwargs: Any) -> str: ...
    def finish_item(self, item_id: str, end_time: str, status: str, issue: Optional[str]=..., attributes: Optional[Dict]=..., **kwargs: Any) -> None: ...
    def save_log(self, log_time: Any, **kwargs: Any) -> None: ...
